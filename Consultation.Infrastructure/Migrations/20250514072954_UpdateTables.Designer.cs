// <auto-generated />
using System;
using Consultation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultation.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250514072954_UpdateTables")]
    partial class UpdateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.Property<int>("ActionLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionLogID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("ActionLogID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("ActionLog");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Consultation.Domain.Bulletin", b =>
                {
                    b.Property<int>("BulletinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BulletinID"));

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notify")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BulletinID");

                    b.ToTable("Bulletin");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.Property<int>("ConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationID"));

                    b.Property<string>("Concern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisapprovedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndedTime")
                        .HasColumnType("time");

                    b.Property<string>("FacultyID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyID1")
                        .HasColumnType("int");

                    b.Property<int>("NotificationNumber")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartedTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID1")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationID");

                    b.HasIndex("FacultyID1");

                    b.HasIndex("NotificationNumber");

                    b.HasIndex("StudentID1");

                    b.ToTable("ConsultationRequest");
                });

            modelBuilder.Entity("Consultation.Domain.Courses", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("ProgramID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Consultation.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.Property<string>("EnrolledCourseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("EnrolledCourseID");

                    b.HasIndex("CourseID");

                    b.HasIndex("FacultyID")
                        .IsUnique();

                    b.HasIndex("SchoolYearID")
                        .IsUnique();

                    b.HasIndex("StudentID");

                    b.ToTable("EnrolledCourse");
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Property<int>("FacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyID"));

                    b.Property<int>("EnrolledCourseID")
                        .HasColumnType("int");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("FacultyUMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyID");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.Property<int>("FacultyScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyScheduleID"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("FacultyScheduleID");

                    b.HasIndex("FacultyID")
                        .IsUnique();

                    b.ToTable("FacultySchedule");
                });

            modelBuilder.Entity("Consultation.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationNumber"));

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationNumber");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolYearID"));

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYearStatus")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Year1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolYearID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("StudentID");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentUMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.HasIndex("ProgramID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Consultation.Domain.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<int?>("FacultyID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UMID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("AdminID")
                        .IsUnique()
                        .HasFilter("[AdminID] IS NOT NULL");

                    b.HasIndex("FacultyID")
                        .IsUnique()
                        .HasFilter("[FacultyID] IS NOT NULL");

                    b.HasIndex("StudentID")
                        .IsUnique()
                        .HasFilter("[StudentID] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Consultation.Domain.ActionLog", b =>
                {
                    b.HasOne("Consultation.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Consultation.Domain.ConsultationRequest", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("FacultyID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("ConsultationRequests")
                        .HasForeignKey("StudentID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Notification");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.Courses", b =>
                {
                    b.HasOne("Consultation.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Consultation.Domain.EnrolledCourse", b =>
                {
                    b.HasOne("Consultation.Domain.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithOne("EnrolledCourse")
                        .HasForeignKey("Consultation.Domain.EnrolledCourse", "FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.SchoolYear", "SchoolYear")
                        .WithOne("EnrolledCourse")
                        .HasForeignKey("Consultation.Domain.EnrolledCourse", "SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Faculty");

                    b.Navigation("SchoolYear");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.FacultySchedule", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithOne("FacultySchedule")
                        .HasForeignKey("Consultation.Domain.FacultySchedule", "FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Consultation.Domain.Program", b =>
                {
                    b.HasOne("Consultation.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithMany("SchoolYears")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithMany("SchoolYears")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.HasOne("Consultation.Domain.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Consultation.Domain.Users", b =>
                {
                    b.HasOne("Consultation.Domain.Admin", "Admin")
                        .WithOne("Users")
                        .HasForeignKey("Consultation.Domain.Users", "AdminID");

                    b.HasOne("Consultation.Domain.Faculty", "Faculty")
                        .WithOne("Users")
                        .HasForeignKey("Consultation.Domain.Users", "FacultyID");

                    b.HasOne("Consultation.Domain.Student", "Student")
                        .WithOne("Users")
                        .HasForeignKey("Consultation.Domain.Users", "StudentID");

                    b.Navigation("Admin");

                    b.Navigation("Faculty");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Consultation.Domain.Admin", b =>
                {
                    b.Navigation("Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Consultation.Domain.Faculty", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourse")
                        .IsRequired();

                    b.Navigation("FacultySchedule")
                        .IsRequired();

                    b.Navigation("SchoolYears");

                    b.Navigation("Users")
                        .IsRequired();
                });

            modelBuilder.Entity("Consultation.Domain.SchoolYear", b =>
                {
                    b.Navigation("EnrolledCourse")
                        .IsRequired();
                });

            modelBuilder.Entity("Consultation.Domain.Student", b =>
                {
                    b.Navigation("ConsultationRequests");

                    b.Navigation("EnrolledCourses");

                    b.Navigation("SchoolYears");

                    b.Navigation("Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
